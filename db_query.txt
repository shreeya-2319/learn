#include <iostream>
#include <vector>
#include <unordered_map>
#include <omp.h>

using namespace std;

struct TableA {
    int ID;
    int Value;
};

struct TableB {
    int ID;
    int OtherValue;
};

// Function to simulate parallelized scan and join
void parallelQueryOptimization(const vector<TableA>& tableA, const vector<TableB>& tableB) {
    // Hash map to store the join result based on the ID key
    unordered_map<int, int> resultMap;

    // Parallel scan over Table A
    #pragma omp parallel for
    for (int i = 0; i < tableA.size(); ++i) {
        for (int j = 0; j < tableB.size(); ++j) {
            if (tableA[i].ID == tableB[j].ID) {  // Simulate a join operation based on matching IDs
                #pragma omp atomic
                resultMap[tableA[i].ID] += tableA[i].Value;  // Aggregate the sum of Values
            }
        }
    }

    // Print the result (Aggregated Values for matching IDs)
    cout << "Query Result (ID: Aggregated Value):" << endl;
    for (const auto& entry : resultMap) {
        cout << "ID: " << entry.first << ", Aggregated Value: " << entry.second << endl;
    }
}

int main() {
    int nA, nB;

    cout << "\nName: Saee Gulhane\nRoll No. 18 \t Div.B\n\n";

    // Get input for Table A
    cout << "Enter the number of rows for Table A: ";
    cin >> nA;

    vector<TableA> tableA(nA);

    cout << "\nEnter elements for Table A (ID, Value):\n";
    for (int i = 0; i < nA; ++i) {
        cout << "Row " << i + 1 << " - ID: ";
        cin >> tableA[i].ID;
        cout << "Row " << i + 1 << " - Value: ";
        cin >> tableA[i].Value;
    }

    // Get input for Table B
    cout << "\nEnter the number of rows for Table B: ";
    cin >> nB;

    vector<TableB> tableB(nB);

    cout << "\nEnter elements for Table B (ID, OtherValue):\n";
    for (int i = 0; i < nB; ++i) {
        cout << "Row " << i + 1 << " - ID: ";
        cin >> tableB[i].ID;
        cout << "Row " << i + 1 << " - OtherValue: ";
        cin >> tableB[i].OtherValue;
    }

    // Parallelized query optimization
    parallelQueryOptimization(tableA, tableB);

    return 0;
}
